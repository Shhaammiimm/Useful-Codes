#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
#define ll long long
#define hello() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define nl "\n"
#define yes cout<<"YES"<<nl
#define no cout<<"NO"<<nl
#define ss second
#define ff first
#define all(v) v.begin(),v.end()
#define eb emplace_back
#define sz(x) (int)(x).size()
#define pb push_back
#define mod 1000000007
#define mem(a,x) memset(a,x,sizeof(a))
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu () {            cerr << endl;}
template < typename T, typename ... hello>void faltu( T arg, const hello &... rest) {cerr << arg << ' ';faltu(rest...);}
const int N=2e5+123;
ll lazy[4*N],a[N],seg[4*N];

void init(ll id,ll b,ll e){
  if(b==e){
    seg[id]=a[b];return;
  }
  ll mid=(b+e)/2;
  init(id*2,b,mid);
  init(id*2+1,mid+1,e);
}
void update(ll ind,ll low,ll high,ll i,ll j,ll val){
    if(lazy[ind]!=0){
      seg[ind]=(high-low+1)-seg[ind];
      if(low!=high){
        lazy[2*ind+1]^=1;
        lazy[2*ind+2]^=1;
      }
      lazy[ind]=0;
    }
  if(low>j || high<i || low>high)return;
  if(low>=i && high<=j){
    seg[ind]=(high-low+1)-seg[ind];
    if(low!=high){
        lazy[2*ind+1]^=1;
        lazy[2*ind+2]^=1;
      }
    return;
  }
  ll mid=(high+low)>>1;
  update(ind*2+1,low,mid,i,j,val);
  update(ind*2+2,mid+1,high,i,j,val);
  seg[ind]=seg[2*ind+1]+seg[2*ind+2];
}
ll query(ll ind,ll low,ll high,ll i,ll j){
    if(lazy[ind]!=0){
      seg[ind]=(high-low+1)-seg[ind];
      if(low!=high){
        lazy[2*ind+1]^=1;
        lazy[2*ind+2]^=1;
      }
      lazy[ind]=0;
    }
    if(low>j || high<i || low>high)return 0;

    if(low>=i  && high<=j){
        return seg[ind];
    }
    ll mid=(low+high)>>1;
    ll left=query(ind*2+1,low,mid,i,j);
    ll right=query(ind*2+2,mid+1,high,i,j);
   // dbg(leftsum,rightsum);
    return left+right;
}
int main()
{
  hello();
  int n,q;cin>>n>>q;
  //init(1,1,n);
  while(q--){
    ll k,a,b,x;
    cin>>k;
    if(k==0){
        cin>>a>>b;a--,b--;
        update(0,0,n-1,a,b,x);
    }
    else{
            cin>>a>>b;a--,b--;
        cout<<query(0,0,n-1,a,b)<<nl;
    }

  }

}


